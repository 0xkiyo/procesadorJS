//// Conjunto de símbolos terminales
Terminales = { eof var id if else ( ) ; { } prompt write /= = , int bool chars d l return < + function cr && }

//// Conjunto de símbolos no terminales
NoTerminales = { P A A1 B D D1 E T T1 H H1 F F1 F2 R1 Fq G G1 G2 G3 Q L S S1 X Z Z1 Cfun Bfun Sfun }

//// Axioma
Axioma = P

//// Lista de producciones
Producciones = {

P -> B Z P
P -> Fq Z P
P -> eof

A -> F id A1
A -> lambda
A1 -> , A
A1 ->lambda

B -> var F id D D1
B -> if ( E ) G
B -> S

D -> = E
D -> lambda
D1 -> , id D1
D1 -> ;

E -> T R1
T -> H T1
T1 -> < H T1
T1 -> lambda
H -> F1 H1
H1 -> + F1 H1
H1 -> lambda
F -> int
F -> bool
F -> chars
F1 -> id F2
F1 -> d
F1 -> l
F1 -> ( E )
F2 -> ( L )
F2 -> lambda
R1 -> && T R1
R1 -> lambda

Fq -> function F id ( A ) Z { Z Cfun }

G -> { S } G1
G -> S
G1 -> else { S }
G1 -> lambda
G2 -> { Sfun } G3
G2 -> Sfun
G3 -> else { Sfun }
G3 -> lambda
L -> E Q
L -> lambda

Q -> , E Q
Q -> lambda

S -> id S1
S -> prompt ( id ) ;
S -> write ( E ) ;
S1 -> ( L ) ;
S1 -> = E ;
S1 -> /= E ;

X -> E ;
X -> ;

Z -> cr Z1
Z1 -> Z
Z1 -> lambda

Cfun -> Bfun Z Cfun
Cfun -> lambda

Bfun -> var F id D D1
Bfun -> if ( E ) G2
Bfun -> Sfun

Sfun -> id S1
Sfun -> prompt ( id ) ;
Sfun -> write ( E ) ;
Sfun -> return X

}